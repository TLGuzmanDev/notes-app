{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","type","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","notesToShow","filter","map","i","key","find","n","changedNote","catch","setTimeout","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"gOAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQD,UAAU,WAAWE,KAAK,SAASC,QAASN,GACjDC,KCCMM,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,yBAAKL,UAAU,SAASK,ICYlBC,EAjBA,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uG,gBCcS,EAtBA,WACb,IAAMC,EAAUC,IAAMC,IAHR,cAIRC,EAAc,CAClBC,GAAI,IACJd,QAAS,mCACTe,KAAM,2BACNjB,WAAW,GAEb,OAAOY,EAAQM,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,OAAON,OAc1C,EAVA,SAACO,GAEd,OADgBT,IAAMU,KAfR,aAesBD,GACrBJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UApBF,aAoBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SC8D9BK,EA/EH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAAqBlB,MAAK,SAACC,GACzBS,EAAST,QAEV,IAEH,IAsCMkB,EAAcN,EAAUJ,EAAQA,EAAMW,QAAO,SAACzC,GAAD,OAAUA,EAAKG,aAElE,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcM,QAAS2B,IACvB,6BACE,4BAAQ7B,QAAS,kBAAM4B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGM,EAAYE,KAAI,SAAC1C,EAAM2C,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACL3C,KAAMA,EACNC,iBAAkB,kBApCH,SAACkB,GACxB,IAAMnB,EAAO8B,EAAMe,MAAK,SAACC,GAAD,OAAOA,EAAE3B,KAAOA,KAClC4B,EAAW,2BAAQ/C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDoC,EACUpB,EAAI4B,GACX1B,MAAK,SAACC,GACLS,EAASD,EAAMY,KAAI,SAAC1C,GAAD,OAAWA,EAAKmB,KAAOA,EAAKnB,EAAOsB,SAEvD0B,OAAM,WACLX,EAAgB,aAAD,OACArC,EAAKK,QADL,sCAGf4C,YAAW,WACTZ,EAAgB,QACf,KACHN,EAASD,EAAMW,QAAO,SAACK,GAAD,OAAOA,EAAE3B,KAAOA,SAoBVlB,CAAiBD,EAAKmB,WAIpD,0BAAM+B,SA1DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBhD,QAAS2B,EACTZ,MAAM,IAAIkC,MAAOC,cACjBpD,UAAWqD,KAAKC,SAAW,IAG7BlB,EAAmBc,GAAYhC,MAAK,SAACC,GACnCS,EAASD,EAAMN,OAAOF,IACtBW,EAAW,SAiDT,2BAAOyB,MAAO1B,EAAS2B,SA7CJ,SAACR,GACxBlB,EAAWkB,EAAMS,OAAOF,UA6CpB,4BAAQpD,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MC3ENuD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ee72fcb7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important';\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button className=\"note-btn\" type=\"button\" onClick={toggleImportance}>\n        {label}\n      </button>\n    </li>\n  );\n};\n\nexport default Note;\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import React from 'react';\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16,\n  };\n\n  return (\n    <div style={footerStyle}>\n      <hr />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2020\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import axios from 'axios';\n// const baseUrl = 'http://localhost:3001/api/notes';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  };\n  return request.then((response) => response.data.concat(nonExisting));\n  // return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default {\n  getAll,\n  create,\n  update,\n};\n","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\nimport noteService from './services/notes';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((response) => {\n      setNotes(response);\n    });\n  }, []);\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    };\n\n    noteService.create(noteObject).then((response) => {\n      setNotes(notes.concat(response));\n      setNewNote('');\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportance = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((response) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : response)));\n      })\n      .catch(() => {\n        setErrorMessage(\n          `the note \"${note.content}\" was already deleted from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) => (\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportance(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}